<!-- Page Heading -->
<div class="d-sm-flex align-items-center justify-content-between mb-4">
    <h1 class="h3 mb-0 text-gray-800">Product Management</h1>
    <button class="btn btn-primary" onclick="showAddProductModal()">
        <i class="fas fa-plus"></i> Add New Product
    </button>
</div>

<!-- Search Bar -->
<div class="mb-3">
    <input type="text" id="searchInput" class="form-control text-white" placeholder="Search products...">
</div>

<!-- Products Table -->
<div class="card shadow mb-4">
    <div class="card-header py-3">
        <h6 class="m-0 font-weight-bold text-primary">All Products</h6>
    </div>
    <div class="card-body">
        <div class="table-responsive">
            <table class="table table-bordered" width="100%" cellspacing="0">
                <thead>
                    <tr>
                        <th>Image</th>
                        <th>Name</th>
                        <th>Price</th>
                        <th>Category</th>
                        <th>Stock</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <% if (products && products.length > 0) { %>
                        <% products.forEach(product => { %>
                            <tr data-product-id="<%= product._id %>">
                                <td>
                                    <img src="<%= product.image %>" alt="<%= product.name %>" style="width: 50px; height: 50px; object-fit: cover;">
                                </td>
                                <td><%= product.name %></td>
                                <td>$<%= product.price.toFixed(2) %></td>
                                <td><%= product.category ? product.category.name : 'N/A' %></td>
                                <td><%= product.stockQuantity %></td>
                                <td>
                                    <button class="btn btn-warning btn-sm" onclick="editProduct('<%= product._id %>')">
                                        <i class="fas fa-edit"></i> Edit
                                    </button>
                                    <button class="btn btn-danger btn-sm" onclick="deleteProduct('<%= product._id %>')">
                                        <i class="fas fa-trash"></i> Delete
                                    </button>
                                </td>
                            </tr>
                        <% }); %>
                    <% } else { %>
                        <tr>
                            <td colspan="6" class="text-center">No products found</td>
                        </tr>
                    <% } %>
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Add/Edit Product Modal -->
<div class="modal fade" id="productModal" tabindex="-1" aria-labelledby="productModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalTitle">Add New Product</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="productForm">
                    <input type="hidden" id="productId">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="name" class="form-label">Product Name</label>
                                <input type="text" class="form-control" id="name" required>
                            </div>
                            <div class="mb-3">
                                <label for="price" class="form-label">Price</label>
                                <input type="number" class="form-control" id="price" min="0" step="0.01" required>
                            </div>
                            <div class="mb-3">
                                <label for="category" class="form-label">Category</label>
                                <select class="form-control" id="category" required>
                                    <option value="">Select Category</option>
                                    <% categories.forEach(category => { %>
                                        <option value="<%= category._id %>"><%= category.name %></option>
                                    <% }); %>
                                </select>
                            </div>
                            <div class="mb-3">
                                <label for="stock" class="form-label">Stock</label>
                                <input type="number" class="form-control" id="stock" min="0" required>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="image" class="form-label">Image URL</label>
                                <input type="url" class="form-control" id="image" required>
                                <div class="mt-2">
                                    <img id="imagePreview" src="" alt="Product Preview" style="max-width: 200px; max-height: 200px; display: none;">
                                </div>
                            </div>
                            <div class="mb-3">
                                <label for="description" class="form-label">Description</label>
                                <textarea class="form-control" id="description" rows="4" required></textarea>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" onclick="saveProduct()">Save Product</button>
            </div>
        </div>
    </div>
</div>

<script>
// Initialize Bootstrap modal
let productModal;
document.addEventListener('DOMContentLoaded', function() {
    const modalElement = document.getElementById('productModal');
    if (modalElement) {
        productModal = new bootstrap.Modal(modalElement);
    }
    
    // Add image preview functionality
    const imageInput = document.getElementById('image');
    if (imageInput) {
        imageInput.addEventListener('input', function(e) {
            const preview = document.getElementById('imagePreview');
            if (e.target.value) {
                preview.src = e.target.value;
                preview.style.display = 'block';
            } else {
                preview.style.display = 'none';
            }
        });
    }
});

function showAddProductModal() {
    const modalTitle = document.getElementById('modalTitle');
    const productForm = document.getElementById('productForm');
    const productId = document.getElementById('productId');
    const imagePreview = document.getElementById('imagePreview');
    
    if (modalTitle) modalTitle.textContent = 'Add New Product';
    if (productForm) productForm.reset();
    if (productId) productId.value = '';
    if (imagePreview) imagePreview.style.display = 'none';
    
    if (productModal) productModal.show();
}

async function editProduct(productId) {
    try {
        const response = await fetch(`/admin/products/${productId}`);
        if (!response.ok) throw new Error('Failed to fetch product details');
        
        const product = await response.json();
        
        // Populate form fields
        const modalTitle = document.getElementById('modalTitle');
        const productIdInput = document.getElementById('productId');
        const nameInput = document.getElementById('name');
        const priceInput = document.getElementById('price');
        const categoryInput = document.getElementById('category');
        const stockInput = document.getElementById('stock');
        const imageInput = document.getElementById('image');
        const descriptionInput = document.getElementById('description');
        const preview = document.getElementById('imagePreview');
        
        if (modalTitle) modalTitle.textContent = 'Edit Product';
        if (productIdInput) productIdInput.value = product._id;
        if (nameInput) nameInput.value = product.name;
        if (priceInput) priceInput.value = product.price;
        if (categoryInput) categoryInput.value = product.category ? (product.category._id || product.category) : '';
        if (stockInput) stockInput.value = product.stockQuantity;
        if (imageInput) imageInput.value = product.image;
        if (descriptionInput) descriptionInput.value = product.description;
        
        // Show image preview
        if (preview) {
            preview.src = product.image;
            preview.style.display = 'block';
        }
        
        if (productModal) productModal.show();
    } catch (error) {
        console.error('Error:', error);
        alert('Failed to load product details. Please try again.');
    }
}

async function deleteProduct(productId) {
    if (confirm('Are you sure you want to delete this product?')) {
        try {
            const response = await fetch(`/admin/products/${productId}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            const data = await response.json();
            
            if (data.success) {
                // Remove the product row from the table
                const row = document.querySelector(`tr[data-product-id="${productId}"]`);
                if (row) {
                    row.remove();
                }
                // Show success message
                alert('Product deleted successfully');
                // Reload the page to refresh the product list
                window.location.reload();
            } else {
                throw new Error(data.message || 'Failed to delete product');
            }
        } catch (error) {
            console.error('Error:', error);
            alert('Failed to delete product. Please try again.');
        }
    }
}

async function saveProduct() {
    try {
        // Get form values
        const productId = document.getElementById('productId').value;
        const name = document.getElementById('name').value.trim();
        const price = document.getElementById('price').value.trim();
        const category = document.getElementById('category').value.trim();
        const stock = document.getElementById('stock').value.trim();
        const image = document.getElementById('image').value.trim();
        const description = document.getElementById('description').value.trim();

        // Debug log all form values
        console.log('Form values:', {
            productId,
            name,
            price,
            category,
            stock,
            image,
            description
        });

        // Validate all required fields
        const requiredFields = {
            name: name,
            price: price,
            category: category,
            stock: stock,
            image: image,
            description: description
        };

        const missingFields = Object.entries(requiredFields)
            .filter(([_, value]) => !value)
            .map(([key]) => key);

        if (missingFields.length > 0) {
            alert(`Error: The following fields are required: ${missingFields.join(', ')}`);
            return;
        }

        // Validate numeric values
        if (isNaN(price) || parseFloat(price) < 0) {
            alert('Error: Price must be a positive number');
            return;
        }

        if (isNaN(stock) || parseInt(stock) < 0) {
            alert('Error: Stock must be a positive number');
            return;
        }

        // Prepare the product data
        const productData = {
            name: name,
            price: parseFloat(price),
            category: category,
            stockQuantity: parseInt(stock),
            image: image,
            description: description
        };

        console.log('Sending product data:', productData); // Debug log

        // Determine if this is a new product or an update
        const url = productId ? `/admin/products/${productId}` : '/admin/products';
        const method = productId ? 'PUT' : 'POST';

        console.log('Sending request to:', url, 'with method:', method); // Debug log

        const response = await fetch(url, {
            method: method,
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(productData)
        });

        console.log('Response status:', response.status); // Debug log

        const data = await response.json();
        console.log('Server response:', data); // Debug log

        if (data.success) {
            // Close the modal
            if (productModal) {
                productModal.hide();
            }
            // Show success message
            alert(data.message || 'Product saved successfully');
            // Reload the page to show updated data
            window.location.reload();
        } else {
            throw new Error(data.message || 'Failed to save product');
        }
    } catch (error) {
        console.error('Error:', error);
        alert(error.message || 'Failed to save product. Please try again.');
    }
}

// Product Table Search
const searchInput = document.getElementById('searchInput');
if (searchInput) {
    searchInput.addEventListener('input', function() {
        const filter = searchInput.value.toLowerCase();
        document.querySelectorAll('table tbody tr').forEach(row => {
            const text = row.textContent.toLowerCase();
            row.style.display = text.includes(filter) ? '' : 'none';
        });
    });
}
</script>